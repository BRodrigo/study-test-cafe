'use strict';

exports.__esModule = true;

var _lodash = require('lodash');

var _types = require('../types');

var _utils = require('./utils');

const EXTERNAL_LINKS = {
    createNewIssue: 'https://github.com/DevExpress/testcafe/issues/new?template=bug-report.md',
    viewportSizes: 'http://viewportsizes.com'
};

exports.default = {
    [_types.TEST_RUN_ERRORS.actionIntegerOptionError]: err => (0, _utils.markup)(err, `
        The "${err.optionName}" option is expected to be an integer, but it was ${err.actualValue}.
    `),

    [_types.TEST_RUN_ERRORS.actionPositiveIntegerOptionError]: err => (0, _utils.markup)(err, `
        The "${err.optionName}" option is expected to be a positive integer, but it was ${err.actualValue}.
    `),

    [_types.TEST_RUN_ERRORS.actionBooleanOptionError]: err => (0, _utils.markup)(err, `
        The "${err.optionName}" option is expected to be a boolean value, but it was ${err.actualValue}.
    `),

    [_types.TEST_RUN_ERRORS.actionSpeedOptionError]: err => (0, _utils.markup)(err, `
        The "${err.optionName}" option is expected to be a number between 0.01 and 1, but it was ${err.actualValue}.
    `),

    [_types.TEST_RUN_ERRORS.pageLoadError]: err => (0, _utils.markup)(err, `
        ${err.errMsg}
    `),

    [_types.TEST_RUN_ERRORS.uncaughtErrorOnPage]: err => (0, _utils.markup)(err, `
        A JavaScript error occurred on ${(0, _utils.formatUrl)(err.pageDestUrl)}.
        At this moment, TestCafe tracks uncaught JavaScript errors on the page. Try to manually perform the test scenario.
        If this error still occurs then it means you site has uncaught JavaScript errors. To disable JavaScript error tracking you can turn the --skip-js-errors option on.
        If the error occurs only with TestCafe then it is a bug. Write a new issue about it at:
        ${(0, _utils.formatUrl)(EXTERNAL_LINKS.createNewIssue)}.

        JavaScript error details:
        ${(0, _utils.replaceLeadingSpacesWithNbsp)((0, _lodash.escape)(err.errStack))}
    `),

    [_types.TEST_RUN_ERRORS.uncaughtErrorInTestCode]: err => (0, _utils.markup)(err, `
        ${(0, _lodash.escape)(err.errMsg)}
    `),

    [_types.TEST_RUN_ERRORS.nativeDialogNotHandledError]: err => (0, _utils.markup)(err, `
        A native ${err.dialogType} dialog was invoked on page ${(0, _utils.formatUrl)(err.pageUrl)}, but no handler was set for it. Use the "setNativeDialogHandler" function to introduce a handler function for native dialogs.
    `),

    [_types.TEST_RUN_ERRORS.uncaughtErrorInNativeDialogHandler]: err => (0, _utils.markup)(err, `
        An error occurred in the native dialog handler called for a native ${err.dialogType} dialog on page ${(0, _utils.formatUrl)(err.pageUrl)}:

        ${(0, _lodash.escape)(err.errMsg)}
    `),

    [_types.TEST_RUN_ERRORS.setTestSpeedArgumentError]: err => (0, _utils.markup)(err, `
        Speed is expected to be a number between 0.01 and 1, but ${err.actualValue} was passed.
    `),

    [_types.TEST_RUN_ERRORS.setNativeDialogHandlerCodeWrongTypeError]: err => (0, _utils.markup)(err, `
        The native dialog handler is expected to be a function, ClientFunction or null, but it was ${err.actualType}.
    `),

    [_types.TEST_RUN_ERRORS.uncaughtErrorInClientFunctionCode]: err => (0, _utils.markup)(err, `
        An error occurred in ${err.instantiationCallsiteName} code:

        ${(0, _lodash.escape)(err.errMsg)}
    `),

    [_types.TEST_RUN_ERRORS.uncaughtErrorInCustomDOMPropertyCode]: err => (0, _utils.markup)(err, `
        An error occurred when trying to calculate a custom Selector property "${err.property}":

        ${(0, _lodash.escape)(err.errMsg)}
    `),

    [_types.TEST_RUN_ERRORS.clientFunctionExecutionInterruptionError]: err => (0, _utils.markup)(err, `
        ${err.instantiationCallsiteName} execution was interrupted by page unload. This problem may appear if you trigger page navigation from ${err.instantiationCallsiteName} code.
    `),

    [_types.TEST_RUN_ERRORS.uncaughtNonErrorObjectInTestCode]: err => (0, _utils.markup)(err, `
        Uncaught ${err.objType} "${(0, _lodash.escape)(err.objStr)}" was thrown. Throw Error instead.
    `, { withoutCallsite: true }),

    [_types.TEST_RUN_ERRORS.unhandledPromiseRejection]: err => (0, _utils.markup)(err, `
        Unhandled promise rejection:

        ${(0, _lodash.escape)(err.errMsg)}
    `, { withoutCallsite: true }),

    [_types.TEST_RUN_ERRORS.uncaughtException]: err => (0, _utils.markup)(err, `
        Uncaught exception:

        ${(0, _lodash.escape)(err.errMsg)}
    `, { withoutCallsite: true }),

    [_types.TEST_RUN_ERRORS.actionOptionsTypeError]: err => (0, _utils.markup)(err, `
        Action options is expected to be an object, null or undefined but it was ${err.actualType}.
    `),

    [_types.TEST_RUN_ERRORS.actionStringArgumentError]: err => (0, _utils.markup)(err, `
        The "${err.argumentName}" argument is expected to be a non-empty string, but it was ${err.actualValue}.
    `),

    [_types.TEST_RUN_ERRORS.actionBooleanArgumentError]: err => (0, _utils.markup)(err, `
        The "${err.argumentName}" argument is expected to be a boolean value, but it was ${err.actualValue}.
    `),

    [_types.TEST_RUN_ERRORS.actionNullableStringArgumentError]: err => (0, _utils.markup)(err, `
        The "${err.argumentName}" argument is expected to be a null or a string, but it was ${err.actualValue}.
    `),

    [_types.TEST_RUN_ERRORS.actionStringOrStringArrayArgumentError]: err => (0, _utils.markup)(err, `
        The "${err.argumentName}" argument is expected to be a non-empty string or a string array, but it was ${err.actualValue}.
    `),

    [_types.TEST_RUN_ERRORS.actionStringArrayElementError]: err => (0, _utils.markup)(err, `
        Elements of the "${err.argumentName}" argument are expected to be non-empty strings, but the element at index ${err.elementIndex} was ${err.actualValue}.
    `),

    [_types.TEST_RUN_ERRORS.actionIntegerArgumentError]: err => (0, _utils.markup)(err, `
        The "${err.argumentName}" argument is expected to be an integer, but it was ${err.actualValue}.
    `),

    [_types.TEST_RUN_ERRORS.actionRoleArgumentError]: err => (0, _utils.markup)(err, `
        The "${err.argumentName}" argument is expected to be a Role instance, but it was ${err.actualValue}.
    `),

    [_types.TEST_RUN_ERRORS.actionPositiveIntegerArgumentError]: err => (0, _utils.markup)(err, `
        The "${err.argumentName}" argument is expected to be a positive integer, but it was ${err.actualValue}.
    `),

    [_types.TEST_RUN_ERRORS.actionElementNotFoundError]: (err, viewportWidth) => (0, _utils.markup)(err, `
        The specified selector does not match any element in the DOM tree.

        ${(0, _utils.formatSelectorCallstack)(err.apiFnChain, err.apiFnIndex, viewportWidth)}
    `),

    [_types.TEST_RUN_ERRORS.actionElementIsInvisibleError]: err => (0, _utils.markup)(err, `
        The element that matches the specified selector is not visible.
    `),

    [_types.TEST_RUN_ERRORS.actionSelectorMatchesWrongNodeTypeError]: err => (0, _utils.markup)(err, `
        The specified selector is expected to match a DOM element, but it matches a ${err.nodeDescription} node.
    `),

    [_types.TEST_RUN_ERRORS.actionAdditionalElementNotFoundError]: (err, viewportWidth) => (0, _utils.markup)(err, `
        The specified "${err.argumentName}" does not match any element in the DOM tree.

        ${(0, _utils.formatSelectorCallstack)(err.apiFnChain, err.apiFnIndex, viewportWidth)}
    `),

    [_types.TEST_RUN_ERRORS.actionAdditionalElementIsInvisibleError]: err => (0, _utils.markup)(err, `
        The element that matches the specified "${err.argumentName}" is not visible.
    `),

    [_types.TEST_RUN_ERRORS.actionAdditionalSelectorMatchesWrongNodeTypeError]: err => (0, _utils.markup)(err, `
        The specified "${err.argumentName}" is expected to match a DOM element, but it matches a ${err.nodeDescription} node.
    `),

    [_types.TEST_RUN_ERRORS.actionElementNonEditableError]: err => (0, _utils.markup)(err, `
        The action element is expected to be editable (an input, textarea or element with the contentEditable attribute).
    `),

    [_types.TEST_RUN_ERRORS.actionElementNonContentEditableError]: err => (0, _utils.markup)(err, `
        The element that matches the specified "${err.argumentName}" is expected to have the contentEditable attribute enabled or the entire document should be in design mode.
    `),

    [_types.TEST_RUN_ERRORS.actionRootContainerNotFoundError]: err => (0, _utils.markup)(err, `
        Content between the action elements cannot be selected because the root container for the selection range cannot be found, i.e. these elements do not have a common ancestor with the contentEditable attribute.
    `),

    [_types.TEST_RUN_ERRORS.actionElementIsNotFileInputError]: err => (0, _utils.markup)(err, `
        The specified selector does not match a file input element.
    `),

    [_types.TEST_RUN_ERRORS.actionCannotFindFileToUploadError]: err => (0, _utils.markup)(err, `
        Cannot find the following file(s) to upload:
        ${err.filePaths.map(path => `  ${(0, _lodash.escape)(path)}`).join('\n')}
    `),

    [_types.TEST_RUN_ERRORS.actionElementNotTextAreaError]: err => (0, _utils.markup)(err, `
        The action element is expected to be a &lt;textarea&gt;.
    `),

    [_types.TEST_RUN_ERRORS.actionElementNotIframeError]: err => (0, _utils.markup)(err, `
        The action element is expected to be an &lt;iframe&gt.
    `),

    [_types.TEST_RUN_ERRORS.actionIncorrectKeysError]: err => (0, _utils.markup)(err, `
        The "${err.argumentName}" argument contains an incorrect key or key combination.
    `),

    [_types.TEST_RUN_ERRORS.actionUnsupportedDeviceTypeError]: err => (0, _utils.markup)(err, `
        The "${err.argumentName}" argument specifies an unsupported "${err.actualValue}" device. For a list of supported devices, refer to ${(0, _utils.formatUrl)(EXTERNAL_LINKS.viewportSizes)}.
    `),

    [_types.TEST_RUN_ERRORS.actionInvalidScrollTargetError]: err => (0, _utils.markup)(err, `
        Unable to scroll to the specified point because a point with the specified ${err.properties} is not located inside the element's cropping region.
    `),

    [_types.TEST_RUN_ERRORS.actionIframeIsNotLoadedError]: err => (0, _utils.markup)(err, `
        Content of the iframe to which you are switching did not load.
    `),

    [_types.TEST_RUN_ERRORS.currentIframeIsNotLoadedError]: err => (0, _utils.markup)(err, `
        Content of the iframe in which the test is currently operating did not load.
    `),

    [_types.TEST_RUN_ERRORS.currentIframeNotFoundError]: err => (0, _utils.markup)(err, `
        The iframe in which the test is currently operating does not exist anymore.
    `),

    [_types.TEST_RUN_ERRORS.currentIframeIsInvisibleError]: err => (0, _utils.markup)(err, `
        The iframe in which the test is currently operating is not visible anymore.
    `),

    [_types.TEST_RUN_ERRORS.missingAwaitError]: err => (0, _utils.markup)(err, `
        A call to an async function is not awaited. Use the "await" keyword before actions, assertions or chains of them to ensure that they run in the right sequence.
    `),

    [_types.TEST_RUN_ERRORS.externalAssertionLibraryError]: err => (0, _utils.markup)(err, `
        ${(0, _lodash.escape)(err.errMsg)}
    `),

    [_types.TEST_RUN_ERRORS.domNodeClientFunctionResultError]: err => (0, _utils.markup)(err, `
       ${err.instantiationCallsiteName} cannot return DOM elements. Use Selector functions for this purpose.
    `),

    [_types.TEST_RUN_ERRORS.invalidSelectorResultError]: err => (0, _utils.markup)(err, `
        Function that specifies a selector can only return a DOM node, an array of nodes, NodeList, HTMLCollection, null or undefined. Use ClientFunction to return other values.
    `),

    [_types.TEST_RUN_ERRORS.actionSelectorError]: err => (0, _utils.markup)(err, `
        Action "${err.selectorName}" argument error:

        ${(0, _lodash.escape)(err.errMsg)}
    `),

    [_types.TEST_RUN_ERRORS.cannotObtainInfoForElementSpecifiedBySelectorError]: (err, viewportWidth) => (0, _utils.markup)(err, `
        Cannot obtain information about the node because the specified selector does not match any node in the DOM tree.

        ${(0, _utils.formatSelectorCallstack)(err.apiFnChain, err.apiFnIndex, viewportWidth)}
    `),

    [_types.TEST_RUN_ERRORS.windowDimensionsOverflowError]: err => (0, _utils.markup)(err, `
        Unable to resize the window because the specified size exceeds the screen size. On macOS, a window cannot be larger than the screen.
    `),

    [_types.TEST_RUN_ERRORS.forbiddenCharactersInScreenshotPathError]: err => (0, _utils.markup)(err, `
        There are forbidden characters in the "${err.screenshotPath}" screenshot path:
        ${(0, _utils.renderForbiddenCharsList)(err.forbiddenCharsList)}
    `),

    [_types.TEST_RUN_ERRORS.invalidElementScreenshotDimensionsError]: err => (0, _utils.markup)(err, `
         Unable to capture an element image because the resulting image ${err.dimensions} ${err.verb} zero or negative.
    `),

    [_types.TEST_RUN_ERRORS.roleSwitchInRoleInitializerError]: err => (0, _utils.markup)(err, `
        Role cannot be switched while another role is being initialized.
    `),

    [_types.TEST_RUN_ERRORS.assertionExecutableArgumentError]: err => (0, _utils.markup)(err, `
        Cannot evaluate the "${err.actualValue}" expression in the "${err.argumentName}" parameter because of the following error:

        ${err.errMsg}
    `),

    [_types.TEST_RUN_ERRORS.assertionWithoutMethodCallError]: err => (0, _utils.markup)(err, `
        An assertion method is not specified.
    `),

    [_types.TEST_RUN_ERRORS.assertionUnawaitedPromiseError]: err => (0, _utils.markup)(err, `
        Attempted to run assertions on a Promise object. Did you forget to await it? If not, pass "{ allowUnawaitedPromise: true }" to the assertion options.
    `)
};
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,
